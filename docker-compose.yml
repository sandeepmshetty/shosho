version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: shosho-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: shosho_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev123
      POSTGRES_MULTIPLE_DATABASES: shosho_test,shosho_analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d shosho_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching & Session Store
  redis:
    image: redis:7-alpine
    container_name: shosho-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass dev123
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: shosho-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: dev_user
      RABBITMQ_DEFAULT_PASS: dev123
      RABBITMQ_DEFAULT_VHOST: shosho
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Elasticsearch - Search & Analytics
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: shosho-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx4g"
      - network.host=0.0.0.0
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB - Flexible Data Storage
  mongodb:
    image: mongo:7-jammy
    container_name: shosho-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: dev_user
      MONGO_INITDB_ROOT_PASSWORD: dev123
      MONGO_INITDB_DATABASE: shosho_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  # ClickHouse - Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: shosho-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: dev_user
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: dev123
    ports:
      - "8123:8123"     # HTTP interface
      - "9000:9000"     # TCP interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: shosho-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: shosho-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev123
    ports:
      - "4000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  mongodb_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: shosho-network
