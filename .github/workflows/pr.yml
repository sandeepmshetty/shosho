name: Pull Request

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Skip if draft PR
  check-pr-status:
    name: Check PR Status
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip.outputs.should_skip }}
    steps:
      - name: Skip draft PRs
        id: skip
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: check-pr-status
    if: needs.check-pr-status.outputs.should-skip != 'true'

    strategy:
      matrix:
        include:
          - name: Backend
            working-directory: ./backend
            setup-services: true
          - name: Frontend
            working-directory: ./frontend
            setup-services: false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_USER: test_user
          POSTGRES_DB: shosho_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.working-directory }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.working-directory }}
        run: npm ci

      - name: Run linting
        working-directory: ${{ matrix.working-directory }}
        run: npm run lint

      - name: Run type checking (Backend)
        if: matrix.name == 'Backend'
        working-directory: ${{ matrix.working-directory }}
        run: npx tsc --noEmit

      - name: Run type checking (Frontend)
        if: matrix.name == 'Frontend'
        working-directory: ${{ matrix.working-directory }}
        run: npm run type-check

      - name: Run tests (Backend)
        if: matrix.name == 'Backend'
        working-directory: ${{ matrix.working-directory }}
        run: npm run test:cov
        env:
          DATABASE_URL: postgres://test_user:test123@localhost:5432/shosho_test
          REDIS_URL: redis://localhost:6379

      - name: Build (Frontend)
        if: matrix.name == 'Frontend'
        working-directory: ${{ matrix.working-directory }}
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000
          NEXT_PUBLIC_APP_URL: http://localhost:3001

  # Check for changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    needs: check-pr-status
    if: needs.check-pr-status.outputs.should-skip != 'true'
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            docker:
              - 'docker-compose.yml'
              - 'backend/Dockerfile'
              - 'frontend/Dockerfile'
              - '.dockerignore'

  # Size impact analysis
  size-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: [check-pr-status, changes]
    if: needs.check-pr-status.outputs.should-skip != 'true' && needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Analyze bundle size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          pattern: './frontend/.next/static/**/*.js'
          build-script: 'cd frontend && npm run build'

  # PR comment with summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [check-pr-status, code-quality, changes, size-analysis]
    if: always() && needs.check-pr-status.outputs.should-skip != 'true'

    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('## 🔍 PR Analysis')
            );

            const backendStatus = '${{ needs.code-quality.result }}' === 'success' ? '✅' : '❌';
            const frontendStatus = '${{ needs.code-quality.result }}' === 'success' ? '✅' : '❌';

            const body = `## 🔍 PR Analysis

            ### Changes Detected
            - **Backend**: ${{ needs.changes.outputs.backend == 'true' && '📝 Modified' || '⚪ No changes' }}
            - **Frontend**: ${{ needs.changes.outputs.frontend == 'true' && '📝 Modified' || '⚪ No changes' }}
            - **Docker**: ${{ needs.changes.outputs.docker == 'true' && '🐳 Modified' || '⚪ No changes' }}

            ### Quality Checks
            - **Backend Tests**: ${backendStatus}
            - **Frontend Build**: ${frontendStatus}
            - **Bundle Size**: ${{ needs.size-analysis.result == 'success' && '📊 Analyzed' || '⚪ Skipped' }}

            ---
            *This comment is automatically updated on each push.*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
